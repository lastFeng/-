题目：
    有一个整型数组arr和一个大小为w的窗口从数组的最左边滑倒最右边，窗口每次向右边滑一个位置。
    例如，数组为[4,3,5,4,3,3,6,7]，窗口大小为3时：
        [4,3,5],4,3,3,6,7           窗口中最大值为5
        4,[3,5,4],3,3,6,7           窗口中最大值为5
        4,3,[5,4,3],3,6,7           窗口中最大值为5
        4,3,5,[4,3,3],6,7           窗口中最大值为4
        4,3,5,4,[3,3,6],7           窗口中最大值为6
        4,3,5,4,3,[3,6,7]           窗口中最大值为7
        结果返回：[5,5,5,4,6,7]
    如果数组长度为n，窗口大小为w，则一共产生n-w+1个窗口的最大值
    
    请实现一个函数：
        输入：整型数组arr，窗口大小为w
        输出：一个长度为n-w+1的数组res，res[i]表示每一个窗口状态下的最大值
        
思路：
    利用双端队列来实现窗口最大值的更新。首先生成生成双端队列qmax，qmax中存数组arr中的下标。
    
    假设遍历到arr[i]， qmax的放入规则为：
        1. 如果qmax为空，直接把下标i放进qmax，放入过程结束。
        2. 如果qmax不为空，取出当前qmax队尾存放的下标，假设为j；
            1） 如果arr[j] > arr[i]，直接把下标i放进qmax的队尾，放入过程结束
            2） 如果arr[j] <= arr[i], 把j从qmax中弹出，继续qmax的放入规则（循环）
    假设遍历到arr[i]，qmax的弹出规则为：
        如果qmax队头的下标等于i-w，说明当前qmax队头的下标已经过期，弹出当前队头的下标即可。
        
  // code java
  public int [] getMaxWindow(int[] arr, int w){
    // 不符合条件，返回null 
    if(arr == null  || w < 1 || arr.length < w){
        return null;
    }
    
    // 构造qmax双端队列
    LinkedList<Integer> qmax = new LinkedList<>();
    // 结果数组
    int [] res = new int[arr.length - w + 1];
    
    // 结果数组的下标
    int index = 0;
    
    // 进行操作
    for(int i=0; i<arr.length; i++){
        // qmax不为空，同时 arr[j] <= arr[i] 的时候循环操作
        while(!qmax.isEmpty() && arr[qmax.peekLast()] <= arr[i]){
            qmax.pollLast();
        }
        qmax.add(i);
        
        // 如果qmax队头的下标等于i-w，说明当前qmax队头的下标已经过期，弹出当前队头的下标即可
        if(qmax.peekFirst() == i - w){
            qmax.pollFirst();
        }
        // 每次到达了一个窗口的大小，则将窗口中的最大值添加入数组中（窗口最大值即为队头）
        if(i >= w - 1){
            res[index++] = arr[qmax.peekFirst()];
        }
    }
  }
