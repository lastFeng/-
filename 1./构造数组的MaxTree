题目：
  定义二叉树节点如下：
    public class Node{
      public int value;
      public Node left;
      public Node right;
      
      public Node(int data){
        this.value = data;
      }
    }
  
  一个数组的MaxTree定义如下：
    1. 数组必须没有重复元素
    2. MaxTree是一颗二叉树，数组的每一个值对应一个二叉树节点
    3. 包括MaxTree树在内且其中的每一棵子树上，值最大的节点都是树的头
    
  给定一个没有重复元素的数组arr，写出生成这个数组的MaxTree的函数，要求如果数组长度为N，则时间复杂度为O(N)，额外空间复杂度为O(N)。
  
思路：
  以下列原则来建立这棵树：
    1. 每一个数的父节点是它左边第一个比它大的数和右边第一个比他大的数中，较小的那个
    2. 如果一个数左边没有比它大的数，右边也没有。也就是说，这个数就是根节点
    
// code java
public Node getMaxTree(int[] arr){
  Node [] nArr = new Node[arr.length];
  
  // 将数组中的值转变成Node数组
  for(int i=0; i != arr.length; i++){
    nArr[i] = new Node(arr[i]);
  }
  
  // 利用栈来解决找到每一个数左右两边第一个比它大的数，栈中保持递减序列
  Stack<Node> stack = new Stack<>();
  // 
  HashMap<Node, Node> lBigMap = new HashMap<>();
  HashMap<Node, Node> rBigMap = new HashMap<>();
  
  for(int i=0; i!=nArr.length; i++){
    Node curNode = nArr[i];
    
    // 从左到右，依次将该点左边第一次出现的比其大的值使用map映射，如果没有则为null
    while((!stack.isEmpty()) && stack.peek().value < curNode.value){
      popStackSetMap(stack, lBigMap);
    }
    stack.push(curNode);
  }
  // 会遗留一些，将剩下的直接处理
  while(!stack.isEmpty()){
    popStackSetMap(stack, lBigMap);
  }
  
  // 从右到左，依次将该点右边第一次出现的比其大的值使用map映射，如果没有则为null
  for(int i=nArr.length-1; i != -1; i--){
    Node curNode = nArr[i];
    
    while(!stack.isEmpty() && stack.peek().value < curNode.value){
      popStackSetMap(stack, rBigMap);
    }
    stack.push(curNode);
  }
  
  // 剩余栈中值直接操作
  while(!stack.isEmpty()){
    popStackSetMap(stack, rBigMap);
  }
  
  // 开始处理
  Node head = null;
  
  for(int i=0; i != nArr.length; i++){
    Node curNode = nArr[i];
    Node left = lBigMap.get(curNode);
    Node right = rBigMap.get(curNode);
    
    // 如果左右都没有比此节点大的值，那么此节点为最大值，记为根节点
    if(left==null && right==null){
      head = curNode;
    }
    // 如果左边没有比其大的值，那么右边比其大的值为当前节点的父节点
    else if(left == null){
    // 将当前节点插入到相应的位置
      if(right.left == null){
        right.left = curNode;
      }
      else{
        right.right = curNode;
      }
    }
    // 右边没有比其大的值，那么左边比其大的值为当前节点的父节点
    else if(right == null){
    // 将当前节点插入到对应父节点的位置
      if(left.left == null){
        left.left = curNode;
      }
      else{
        left.right = curNode;
      }
    }
    else{
      // 左边和右边第一个大中的较小一个为父节点
      Node parent = left.value < right.value ? left : right;
      
      // 将当前节点插入到父节点的对应位置
      if(parent.left == null){
        parent.left = curNode;
      }
      else{
        parent.right = curNode;
      }
    }
  }
  return head;
}

// 设置当前点左右两边比当前点大的映射，如果没，则为null
public void popStackSetMap(Stack<Node> stack, HashMap<Node, Node> map){
  Node popNode = stack.pop();
  
  if(stack.isEmpty()){
    map.put(popNode, null);
  }
  else{
    map.put(popNode, stack.peek());
  }
}
