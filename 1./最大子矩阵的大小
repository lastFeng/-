题目：
  给定一个整型矩阵map，其中的值只有0和1两种，求其中全是1的所有矩形区域中，最大的矩形区域为1的数量。
  
举例：
  1，1，1，0
  其中，最大的矩形区域有3个1，所以返回3
  
  1，0，1，1
  1，1，1，1
  1，1，1，1
  1，1，1，0
  其中，最大的矩形区域有6个1，所以返回6
  
思路：
  1. 矩阵的行数为N，以每一行做切割，统计当前行作为底的情况下，每个位置往上的1的数量（包括当前行）。使用高度数组height来表示
    例如：
      map = 1 0 1 1 
            1 1 1 1
            1 1 1 0
      以第一行做切割后，height = [1, 0, 1, 1]，height[j]表示目前的底上（第一行），j位置往上（包括j）有多少个连续的1.
      以第二行做切割后，height = [2, 1 , 2, 2],注意到从第一行到第二行，height数组的更新是十分方便的，即:
        height[j] = map[i][j] == 0 ? 0 : height[j] + 1;
      以此类推
  2. 对于每一次切割，都利用更新后的height数组来求出咦每一行为底的情况下，最大的矩形是什么，那么这么多次的切割中，最大的矩形就是我们要的。
    我们以height = [3, 4, 5, 4, 3, 6]为例说明如何根据height数组求其中的最大矩形（住，可以将数组看作是一个直方图，我们求能达到的最大矩形面积）
    (使用一个栈进行操作，栈内的位置值以递增顺序保持，只要递增顺序一打破，就计算当前的矩形面积是否为最大矩形面积，存入到对应值中。)
      1. 生成一个栈，记为stack。从左到右遍历height数组，每遍历一个位置，都会把位置压进stack中。
      2. 遍历到height的 0 位置，height[0] = 3，此时stack为空，直接将位置0压入栈中，stack栈为{0}。
      3. 遍历到height 1 的位置，height[1]=4，此时stack的栈顶为位置 0 ，值为3，将位置1 直接压入栈中，stack栈为｛1， 0｝
      4. 遍历到height 2 的位置，height[2]=5,压入stack栈，此时stack为｛2， 1， 0｝
      5. 遍历到height 3 的位置，height[3]=4，此时stack栈的栈顶元素值为5>4,此时出现了一个关键逻辑，即
        如果当前i位置的值height[i]小于等于当前栈顶位置所代表的值，则把栈中存的位置不断弹出，知道某一个栈顶所代表的值小于i对应值，再把位置i压入，并在这期间内左如下处理：
          1. 假设当前弹出的栈顶位置记为j，弹出栈顶之后，新的栈顶记为k。然后我们开始考虑位置j的柱子向右和向左最远能扩展到哪里。
          2. 对位置j的柱子来说，最右能扩展到哪里呢？
            如果height[j]>height[i], 那么i-1位置就是向右能够扩展的最远位置。因为j之所以被弹出，就是因为遇到了第一个比位置j值小的位置
            如果height[j]==height[i]，那么i-1位置不一定是向右能扩到的最远位置，只是起码能扩展到的位置，那么：
              可以肯定的是，在这种情况下，i位置的柱子向左必然也可以扩展到j位置。也就是说，j位置的柱子扩出来的最大矩形和i位置的柱子扩出来的最大矩形是同一个。
              所以，此时不再计算j位置的柱子能扩到的最大矩形，因为位置i肯定要压入到栈中，那就等位置i弹出来再说吧。
          3. 对于位置j的柱子来说，最左能扩到哪里呢？
            肯定是k+1位置。首先height[k+1...j-1]之间不可能有小于或等于height[k]的值，否则k位置早从栈里弹出了。
            然后因为在栈里k位置和j位置原本是相邻的，并且从栈顶到栈底的位置所代表的值是依次递减并且无重复值，所以在height[k+1...j-1]之间不可能有大于或等于height[k]，同时又小于或等于height[j]的，因为如果有这样的值，k和j在栈中就不可能相邻。
            所以height[k+1...j-1]之间的值必然是即大于height[k], 又小于height[j]的，所以j位置的柱子向左最远可以扩到k+1位置。
            
          综上所述，j位置的柱子能扩出来的最大矩形为（i-k+1）* height[j]。
          
          // code java
          public int MaxRecSize(int [][] map){
            // 输入不满足的条件返回0
            if(map == null || map.length == 0 || map[0].lenght == 0){
              return 0;
            }
            // 最大的矩形面积保存值
            int maxArea = 0;
            
            // 按行切割的高度
            int [] height = new int[map[0].lenght];
            
            // 根据每行选择出最大的矩形面积
            for(int i=0; i<map.length; i++){
             // 计算每一行为底的切割高度
              for(int j=0; j<map[0].length; j++){
                height[j] = map[i][j] == 0 ? 0 : height[j] + 1;
              }
              // 求是否为最大值
              maxArea = Math.max(maxRecFromBottom(height),maxArea);
            }
            return maxArea;
          }
          
          // 每一行为底的最大面积计算函数
          public static int maxRecFromBottom(int height){
            // 不满足条件的情况
            if(height==null || height.length==0){
              return 0;
            }
            
            int maxArea = 0;
            Stack<Integer> stack = new Stack<>();
            
            for(int i=0; i<heigth.length; i++){
              // 栈不为空，同时不比栈顶大时，计算最大值
              while(!stack.isEmpty() && height[i] <= heigth[stak.peek()]){
                int j = stack.pop();
                int k = stack.isEmpty() ? -1 : stack.peek();
                int curArea = (i-k+1) * height[j];
                maxArea = Math.max(curArea, maxArea);
              }
              stack.push(i);
            }
            
            // 最后可能stack上还有值，此时还要计算
            while(!stack.isEmpty()){
              int j = stack.pop();
              int k = stack.isEmpty() ? -1 : stack.peek();
              int curArea = (i - k + 1) * height[j];
              maxArea = Math.max(curArea, maxArea);
            }
            
            return maxArea;
          }
