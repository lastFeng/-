题目：
  宠物、狗和猫的类如下：
  
  public class Pet {
    private String type;

    public Pet(String type) {
      this.type = type;
    }
    public String getPetType() {
      return this.type;
    }
  }
  
  public class Dog extends Pet {
    public Dog(String type) {
      super("dog");
    }
  }
  
  public class Cat extends Pet {
    public Cat(String type) {
      super("cat");
    }
  }
  
  实现一种猫狗队列的结构，要求如下：
    用户可以调用add方法将cat类或dog类的实例放入队列中
    用户可以调用pollAll方法，将队列中所有的实例按照队列的先后顺序依次输出
    用户可以调用pollDog方法，将队列中dog类的实例按照进队列的先后顺序依次弹出
    用户可以调用pollCat方法，将队列中cat类的实例按照进队列的先后顺序依次弹出
    用户可以调用isEmpty方法，检查队列中是否还有实例
    用户可以调用isDogEmpty方法，检查队列中是否还有dog类实例
    用户可以调用isCatEmpty方法，检查队列中是否还有cat类实例
    
思路：
  用两个队列来放置两个类的实例
  需要一个中间的类来统一这两个类的放入顺序以及一些操作方法
  
  1. 使用新的类来实现两个类实例的进入顺序
  public class PetEnterQueue {
    // 两个类都是继承Pet类，所以可以用其基类进行处理
    private Pet pet;
    private long count;
    
    // 构造函数，将进入的实例编号
    public PetEnterQueue(Pet pet, long count) {
      this.pet = pet;
      this.count = count;
    }
    
    // 获取该类的对象方法
    public Pet getPet() {
      return this.pet;
    }
    // 获取该对象进入的顺序
    public long getCount() {
      return this.count;
    }
    
    // 根据宠物类的方法来获得此实例属于哪个type
    public String getEnterPetType() {
      return this.pet.getPetType();
    }
  }
  
  2. 在1类的基础上进行编码操作即可
  import java.util.LinkedList;
  import java.util.Queue;

  public class DogCatQueue {
    // 队列的类型都是PetEntryQueue类型
    private Queue<PetEnterQueue> dogQ;
    private Queue<PetEnterQueue> catQ;
    private long count;
    
    // 初始化构造函数，将队列初始为链表，同时将计数器初始为0
    public DogCatQueue() {
      this.dogQ = new LinkedList<PetEnterQueue>();
      this.catQ = new LinkedList<PetEnterQueue>();
      this.count = 0; 
    }
    
    // 添加实例， 通过判断实例的类型是dog？cat,将实例添加入对应的队列中
    public void add(Pet pet) {
      if (pet.getPetType().equals("dog")) {
        this.dogQ.add(new PetEnterQueue(pet, this.count++));
      }
      else if (pet.getPetType().equals("cat")) {
        this.catQ.add(new PetEnterQueue(pet, this.count++));
      }
      // 如果都不是这两个实例的类型，则抛出异常
      else {
        throw new RuntimeException("err, not dog or cat");
      }
    }
    
    // 根据编号，按顺序弹出
    public Pet pollAll() {
      if (!this.dogQ.isEmpty() && ! this.catQ.isEmpty()) {
        if (this.dogQ.peek().getCount() < this.catQ.peek().getCount()) {
          return this.dogQ.poll().getPet();
        }
        else {
          return this.catQ.poll().getPet();
        }
      }
      else if (!this.dogQ.isEmpty()) {
        return this.dogQ.poll().getPet();
      }
      else if (!this.catQ.isEmpty()) {
        return this.catQ.poll().getPet();
      }
      else {
        throw new RuntimeException("err, queue is empty!");
      }
    }
    
    // 根据dogQ队列是否为空来弹出相应的实例
    public Dog pollDog() {
      if(!this.dogQ.isEmpty()){
        return (Dog) this.dogQ.poll().getPet();
      }
      else {
        throw new RuntimeException("Dog is empty!");
      }
    }

    // 根据catQ对列是否为空来弹出相应的实例
    public Cat pollCat(){
      if (!this.catQ.isEmpty()) {
        return (Cat) this.catQ.poll().getPet();
      }
      else {
        throw new RuntimeException("Cat is empty!");
      }
    }
    
    public boolean isEmpty() {
      return this.dogQ.isEmpty() && this.catQ.isEmpty();
    }

    public boolean isDogEmpty() {
      return this.dogQ.isEmpty();
    }

    public boolean isCatEmpty(){
      return this.catQ.isEmpty();
    }
  }

  
