题目：
  汉诺塔问题比较经典，修改一下规则：
  现在限制不能从最左侧的塔直接移到最右侧，也不能从最右侧直接移到最左侧，而是必须经过中间塔。
  问题： 求当塔有N层的时候，打印最优移动过程和最优移动总步数。

例子：
  当塔数为两层时，最上层的塔记为1，最下层的塔记为2，则打印：
    Move 1 from left to mid
    Move 1 from mid to right
    Move 2 from left to mid
    Move 1 from right to mid
    Move 1 form mid to left
    Move 2 form mid to right
    Move 1 from left to mid
    Move 1 from mid to right
    It will move 8 steps.
    
 要求：
  1. 递归方法
  2. 非递归方法
  
思路：
  1. 递归方法
    首先，如果只剩最上层的塔需要移动，则有如下处理：
      1. 如果希望从“左”移到“中”，打印“Move 1 from left to mid”
      2. 如果希望从“中”移到“左”，打印“Move 1 from mid to left”
      3. 如果希望从“中”移到“右”，打印“Move 1 from mid to right”
      4. 如果希望从“右”移到“中”，打印“Move 1 from right to mid”
      5. 如果希望从“左”移到“右”，打印“Move 1 from left to mid”和“Move 1 from mid to right”
      6. 如果希望从“右”移到“左”，打印“Move 1 from right to mid”和“Move 1 from mid to left”
      以上过程就是递归的终止条件，也就是只剩上层塔时的打印过程。
    
    接下来，我们分析剩下多层塔的情况：
    如果剩下N层塔，从最上到最下依次为1~N，则右如下判断：
      1. 如果剩下的N层塔都在“左”，希望全部移到“中”，则有三个步骤：
        1）将1-N-1层塔先全部从“左”移到“右”，明显交给递归过程
        2）将第N层塔从“左”移到“中”
        3）在将1~N-1层塔全部从“右”移到“中”。
      2. 如果吧剩下的N层塔从“中”移到“左”，从“中”移到“右”，从“右”移到“中”，过程与情况1同理，一样分解为三步。
      3. 如果剩下的N层塔都在“左”，希望全部移到“右”。则有五个步骤：
        1）将1~N-1层塔先全部从“左”移到“右”，交给递归过程
        2）将第N层塔从“左”移到“中”
        3）将1~N-1层塔从“右”移到“中”
        4）将第N层从“中”移到“右”
        5）将1~N-1层塔从“左”移到“右”，递归过程
      4. 如果剩下的N层塔都在“右”，希望全部移到“左”，过程与情况3相同
      
  // code java
  public int hanoiProblem1(int num, String left, String mid, String right){
    if(num < 1){
      return 0;
    }
    // 前三个String参数为塔的位置，最后两个参数为from 和 to 
    return process(num, left, mid, right, left, right);
  }
  
  public int process(int num, String left, String mid, String right, String from, String to){
    // 最底层
    if(num == 1){
      // 只移动一步（left-->mid,mid-->left,mid-->right,right-->mid） 
      if(from.equals(mid) || to.equals(mid)){
        System.out.println("Move 1 from " + from + " to " + to);
        return 1;
      }
      // 移动两步(left-->mid-->right or right-->mid-->left)
      else{
        System.out.println("Move 1 from " + from + " to " + mid);
        System.out.println("Move 1 from " + mid + " to " + to);
      }
    }
    // 剩下的层数的移动
    // (left-->mid,right-->mid)  三个步骤
    if(from.equals(mid) || to.equals(mid))｛
      // 首先先确定是要移动到哪个地方
      String another = (from.equals(left)) || (to.equals(left)) ? right : left;
      // 将1-N-1移动到对应对方--递归
      int part1 = process(num-1, left, mid, right, from, another);
      // 将第N层移动到to
      System.out.println("Move " + num + " from " + from + " to " + to);
      int part2 = 1;
      // 将剩下的从对应移到中
      int part3 = process(num-1, left, mid, right, another, to);
      return part1 + part2 + part3;
    ｝
    // (left-->mid-->right or right-->mid-->left) 五个步骤
    else{
      // 递归将1~num-1 从from 到 to
      int part1 = process(num-1, left, mid, right, from, to);
      // 将第num从from移到mid
      System.out.println("Move " + num + " from " + from + " to " + mid);
      int part2 = 1;
      // 递归将1~num-1 从to 到 from
      int part3 = process(num-1, left, mid, right, to, from);
      // 将第num层从“中”移到to位置
      System.out.println("Move " + num + " from " + mid + " to " + to);
      int part4 = 1;
      // 递归将1~num-1 从from 到 to
      int part5 = process(num-1, left, mid, right, from, to);
      return part1 + part2 + part3 + part4 + part5；
    }
  }
  
  2. 非递归的方法---用栈来模拟整个过程
  修改后的汉诺塔问题，实际动作只有四个：左-->中， 中-->左，中-->右，右-->中
  把左、中、右三个地点抽象成栈，依次记为LS，MS，RS。
    最初所有的塔都在LS上。那么如上4个动作就可以看成：某一个栈（from）把栈顶元素弹出，然后压入到另外一个栈（to），作为这个栈（to）的栈顶
      1. 一个动作能发生的先决条件是不违反小压大的原则。
      2. 相邻不可逆原则，否则不是最优解，即左-->中之后，不能执行中-->左操作，反复操作等于动作没有进行，但是浪费了步数，得不到最优解
    由这两个原则，可以得出--非递归方法的核心结论：
      1. 游戏的第一个动作一定是L-->M
      2. 在走最少步数过程中的任何时刻，四个动作中只有一个动作不违反小压大和相邻不可逆
        证明结论2：
          假设前一步的动作是L-->M：
            根据小压大原则，L-->M的动作不会重复发生
            根据相邻不可逆原则，M-->L的动作也不该发生
            根据小压大原则，M-->R和R-->M只会有一个达标
          同理 M-->L，M-->R，R-->M可证。
      所以在非递归过程中的动作，只要满足这两个原则下，只有一个动作可达，那么就能进行对应编程
      
  // code java 
  
  // 构造5个动作的枚举
  public enmu Action{
    No, LToM, MToL, MToR, RToM
  }
  // 非递归程序
  public int hanoiProblem2(int num, String left, String mid, String right){
    // 建立三个栈
    Stack<Integer> lS = new Stack<>();
    Stack<Integer> mS = new Stack<>();
    Stack<Integer> rS = new Stack<>();
    
    // 将最大值压入栈，避免错误，但是这个值不使用
    lS.push(Integer.MAX_VALUE);
    mS.push(Integer.MAX_VALUE);
    rS.push(Integer.MAX_VALUE);
    
    // 首先往lS栈压入num个值
    for(int i = num; i > 0; i--){
      lS.push(i);
    }
    
    // 初始化动作，
    Action[] record = {Action.No};
    int step = 0;
    
    // 每次循环四个动作中只有一个动作才会满足
    while(rS.size() != num + 1){
      // L --> M
      step += fStackToStack(record, Action.MToL, Action.LToM, lS, mS, left, mid);
      // M --> L
      step += fStackToStack(record, Action.LToM, Action.MToL, mS, lS, mid, left);
      // M --> R
      step += fStackToStack(record, Action.RToM, Action.MToR, mS, rS, mid, right);
      // R --> M
      step += fStackToStack(record, Action.MToR, Action.RToM, rS, mS, right, mid);
    }
    return step;
  }
  
  public static int fStackToStack(Action[] record, Action preNoAct, Action nowAct, Stack<Integer> fStack, Stack<Integer> tStack,
                    String from, String to){
    // 满足两个原则
    if(record[0] != preNoAct && fStcak.peek() < tStack.peek()){
      tStack.push(fStack.pop());
      System.out.println("Move " + tStack.peek() + " from " + from + " to " + to);
      record[0] = nowAct;
      return 1;
    }
    return 0;
  }
  
      
    
  
      
      
      
      
