## 题目
  ### 实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素的操作
## 要求
  ### 1. pop、push、getMin操作的时间复杂度都是O(1).
  ### 2. 设计的栈类型可以使用现成的栈结构
  
## 总体思路
  ### 在设计上，使用两个栈，一个栈保存当前栈中的元素，功能与普通栈一样，记作stackData；另一个栈则是保存每一步的最小值，记作stackMin；
  
## 方案一：
  ### stackMin栈中，保存当前最小值，遇到更小的值时，往stackMin栈中压入即可。而压入值比栈中值大时，不往stackMin栈里压入任何值
  
  `java
  public class MyStack{
    private Stack<Integer> stackData;
    private Stack<Integer> stackMin;
    
    public MyStack(){
      this.stackData = new Stack<>();
      this.stackMin = new Stack<>();
    }
    
    public void push(int newNum){
      if (this.stackMin.isEmpty()){
        this.stackMin.push(newNum);
      }
      else if(newNum <= this.getMin()){
        this.stackMin.push(newNum);
      }
      this.stackData.push(newNum);
    }
    
    public int pop(){
      if(this.stackMin.isEmpty()){
        throw new RuntimeException("Your stack is empty.");
      }
      int value = this.stackData.pop();
      if(value == this.getMin()){
        this.stackMin.pop();
      }
      return value;
    }
  }
  
  public int getMin(){
    if(this.stackMin.isEmpty()){
      throw new RuntimeException("Your stack is empty.");
    }
    return this.stackMin.peek();
  }
  `
  
## 方案二：
  ### ### stackMin栈中，保存当前最小值，遇到更小的值时，往stackMin栈中压入即可。而压入值比栈中值大时，往stackMin栈里压入当前stackMin栈中的较小值
