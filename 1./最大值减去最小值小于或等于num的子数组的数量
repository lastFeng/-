题目：
  给定数组arr和整数num，共返回有多少个子数组满足如下情况：
    1. max(arr[i...j]) - min(arr[i...j]) <= num
    2. max(arr[i...j])表示子数组arr[i...j]中的最大值，min(arr[i...j])表示子数组arr[i...j]中的最小值
  要求：
    如果数组长度为N，请实现时间复杂度为O(N)的解法
    
思路：
  普通解法：
    找到arr的所有子数组，一共有O(N^2)个，然后对每一个子数组做遍历找到其中的最小值和最大值，根据判断是否符合条件
  使用生成窗口最大值数组解法：
    生成两个双端队列qmax和qmin。当子数组为arr[i..j]时，qmax维护了窗口子数组arr[i..j]的最大值更新的结构，qmin维护了窗口子数组arr[i..j]的最小值更新的结构。
    当子数组arr[i..j]向右扩一个位置变成arr[i..j+1]时，qmax和qmin结构可以在O(1)的时间内更新，并且可以在O(1)的时间内得到arr[i..j+1]的最大值和最小值，向左缩一个位置时，也一样
  
    通过分析可以得出两个结论：
      1. 如果子数组arr[i..j]满足条件，那么arr[i..j]中的任何一个子数组（即arr[l..k] (i<=l<=k<=j)）都满足条件。
      2. 如果子数组arr[i..j]不满足条件，那么以arr[i..j]中扩的任何一个子数组（即arr[l..k] (l<=i<=j<=k)）都不满足条件。
      
    设计过程如下：
      1. 生成两个双端队列qmax和qmin。生成两个整型变量i和j，表示子数组的范围，即arr[i..j]。生成整型变量res，表示所有满足条件的子数组数量
      2. 令j不断向右移动（j++），表示arr[i..j]向右扩大，并不断更新qmax和qmin结构，保证qmax和qmin始终维持动态窗口最大值和最小值的结构。一但出现arr[i..j]不满足条件的情况下，j向右
      扩的过程就停止了，此时满足条件的个数为j-i个。则res+=j-i。
      3. 令i向右移动一个位置，并对qmax和qmin做出相应的更新，然后重复步骤2
      4 根据步骤2 和步骤3 ， 依次求出以arr[0],arr[1]...arr[N-1]作为第一个元素的子数组中满足条件的数量分别是多少个，累加起来的数量就是最终的结果
    上述过程中，所有的下标值最多进qmax和qmin一次，出qmax和qmin一次。i和j的值也不断增加，并且从来不减小。所以复杂度为O(N)。
    
// code java
public int getNum(int[] arr, int num){
  // 不满足条件
  if(arr == null || arr.length == 0){
    return 0;
  }
  
  // 两个双端队列
  LinkedList<Integer> qmin = new LinkedList<>();
  LinkedList<Integer> qmax = new LinkedList<>();
  
  // 子数组范围变量
  int i = 0;
  int j = 0;
  
  // 结果保存
  int res = 0;
  
  // 进行步骤2和步骤3
  while(i < arr.length){
    while(j < arr.length){
      // 更新qmin队列
      while(!qmin.isEmpty() && arr[qmin.peekLast()] >= arr[j]){
        qmin.pollLast();
      }
      qmin.addLast(j);
      
      // 更新qmax队列
      while(!qmax.isEmpty() && arr[qmax.peekLast()] <= arr[j]){
        qmax.pollLast();
      }
      qmax.addLast(j);
      
      // 不满足条件下退出
      if(arr[qmax.getFirst()] - arr[qmin.getFirst()] > num){
        break;
      }
      // 满足条件下，j向右扩位置
      j++;
    }
    // 将过期的qmin弹出
    if(qmin.peekFirst() == i){
      qmin.pollFirst();
    }
    // 将过期的qmax弹出
    if(qmax.peekFirst() == i){
      qmax.pollFirst();
    }
    
    // 更新结果
    res += j - i;
    // i位置向右扩位置
    i++;
  }
  return res;
}
