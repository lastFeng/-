题目：
  一个栈中元素的类型为整型，现在想将该栈从顶到底按照从大到小的顺序排序，只许申请一个栈。除此之外，可以申请新的变量，但不能申请额外的数据结构。

思路：
  使用一个辅助栈进行操作
  要排序的栈记为stack，辅助栈记为help。
  1. 在stack上执行pop操作，弹出元素记为cur
  2. 如果cur小于或等于help栈顶元素，将cur压入help栈
  3. 如果cur大于help栈顶元素，则将help栈顶元素弹出压入stack栈中，重复比较直到cur小于等于help栈顶元素
  4. 重复1-3，知道stack为空
  
// code java
public static void sortStackByStack(Stack<Integer> stack){
  // 辅助栈
  Stack<Integer> help = new Stack<>();
  while(!stack.isEmpty()){
    int cur = stack.pop();
    
    // cur值大于help栈顶并且help栈不为空时，将help栈顶值压回stack中
    while(!help.isEmpty() && cur > help.peek()){
      stack.push(help.pop());
    }
    help.push(cur);
  }
  
  // 此时，help栈顶到栈底的顺序是从小到大排序的，将help内的值压回stack栈即满足要求
  while(!help.isEmpty()){
    stack.push(help.pop());
  }
}
