题目：
  给定一个链表的头节点head，请判断该链表是否为回文结构。

  例如：
    1->2->1， 返回true
    1->2->2->1， 返回true
    1->2->3， 返回false

思路：
  方法一：
  利用栈结构即可。从左到右遍历链表，遍历的过程中把每个节点依次压入栈中。
  因为栈是先进后出的，所以遍历完成后，从栈顶到栈底的节点值出现顺序与原链表从左到右的值出现顺序反过来。
  所以只要不是回文结构，顺序就肯定对不上。
  
  //code java
  public class Node{
    public int value;
    public Node next;
    
    public Node(int data){
      this.value = data;
    }
  }
  
  public boolean isPalindrome1(Node head){
    Stack<Node> stack = new Stack<>();
    Node cur = head;
    while(cur != null){
      stack.push(cur);
      cur = cur.next;
    }
    
    while(head != null){
      if(head.value != stack.pop().value){
        return false;
      }
      head = head.next;
    }
    return true;
  }
  
  方法二：
  对方法一进行优化，只是压入一半的值就可以了：
  如果N是偶数，前N/2的节点叫做左半区，后N/2的节点叫右半区
  如果N是奇数，忽略处于中间的节点。
  
  // code java
  public boolean isPalindrome2(Node head){
    if(head == null || head.next == null){
      return true;
    }
    
    Node right = head.next;
    Node cur = head;
    
    // 找到右半区的第一个值
    while(cur.next != null && cur.next.next != null){
      right = right.next;
      cur = cur.next.next;
    }
    Stack<Node> stack = new Stack<>();
    // 将右半区的值压入栈
    while(right != null){
      stack.push(right);
      right = right.next;
    }
    
    while(!stack.isEmpty()){
      if(head.value != stack.pop().value){
        return false;
      }
      head = head.next;
    }
    return true;
  }
  
  进阶：
    如果链表长度为N，时间复杂度达到O(N)，额外空间复杂度达到O(1)。
  
  方法三：
  方法三不需要栈和其他数据结构，只用有限个变量，额外空间复杂度为O(1)。
  1. 首先改变链表右半区的结构，使整个右半区反转，最后指向中间节点
  我们将左半区的第一个节点（也就是原链表的头节点）记为leftStart，右半区反转之后最右边的节点（也就是原链表的最后一个节点）记为rightStart。
  
  2. leftStart和rightStart同时向中间点移动，移动每一步都比较leftStart和rightStart节点的值，看是否一样
  
  3. 不管最后返回是true或者false，都要把链表还原
  
  4. 链表还原之后返回检查结果。
  
  public boolean isPalindrome3(Node head){
    if(head == null || head.next == null){
      return true;
    }
    
    Node n1 = head;
    Node n2 = head;
    
    // 找到中间节点
    while(n2.next != null && n2.next.next != null){
      n1 = n1.next;   // n1指向中间节点
      n2 = n2.next.next;  // n2指向尾节点
    }
    
    n2 = n1.next;
    n1.next = null;
    
    Node n3 = null;
    
    // 将右半区反转指向中间节点
    // 最后n2,n1指向rightStart
    // head指向leftStart
    while(n2.next != null){
      n3 = n2.next;
      n2.next = n1;
      n1 = n2;
      n2 = n3;
    }
    
    n3 = n1;
    n2 = head;
    boolean res = true;
    
    while(n1 != null && n2 != null){
      if(n1.value != n2.value){
        res = false;
        break;
      }
      n1 = n1.next;
      n2 = n2.next;
    }
    
    // 恢复链表
    // n3保存了rightStart，将其反转即可
    n1 = n3.next;
    n3.next = null;
    while(n1 != null){
      n2 = n1.next;
      n1.next = n3;
      n3 = n1;
      n1 = n2;
    }
    
    return res;
  }
  
