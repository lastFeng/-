题目：
  给定一个无序单链表的头节点head，实现单链表的选择排序。
  要求：额外空间复杂度为O(1)。
  
思路：
  1. 开始时默认整个链表都是未排序的部分，对于找到的第一个最小节点，肯定是整个节点中最小值节点，将其设置为新的头点记为newHead。
  2. 每次的未排序的部分中找到最小值的节点，然后把这个节点从未排序的链表中删除，删除的过程当然要保证未排序部分的链表在结构上不至于断开。
  3. 把删除的节点连接到排好序部分的链表尾部
  4. 返回newHead
  
  public class Node{
    public int value;
    public Node next;
    
    public Node(int data){
      this.value = data;
    }
  }
  
  // code java
  public static Node selectionSort(Node head){
    // 保存排序部分尾部
    Node tail = null;
    // 未排序部分的头部
    Node cur = head;
    // 最小节点的前一个节点
    Node smallPre = null;
    // 最小的节点
    Node small = null;
    
    while(cur != null){
      small = cur;
      smallPre = getSmallestPreNode(cur);
      if(smallPre != null){
        small = smallPre.next;
        // 删除该节点
        smallPre.next = small.next;
      }
      // 下一个节点，要判断是否为最小节点，是的话往后遍历
      cur = cur == small ? cur.next : cur;
      
      // 尾节点往后走
      if(tail == null){
        head = small;
      }
      else{
        tail.next = small
      }
      tail = small;
    }
    return head;
  }
  
  
  public static Node getSmallestPreNode(Node head){
    Node smallPre = null;
    Node small = head;
    Node pre = head;
    Node cur = pre.next;
    
    // 循环遍历找到最小值
    while(cur != null){
      if(cur.value < small.value){
        smallPre = pre;
        small = cur;
      }
      pre = cur;
      cur = cur.next;
    }
    
    return smallPre;
  }
  
  
