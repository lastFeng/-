题目：
  给定两个有序单链表的头节点head1和head2，请合并两个有序链表，合并后的链表依然有序，并返回合并后的链表头节点
  
思路：
  1. 如果有一个链表为空，说明直接返回
  2. 遍历两个链表的值，依次往下，知道某个链表结束后，另外一个链表直接连接即可。
  
// code java
public class Node{
  public int value;
  public Node next;
  
  public Node(int data){
    this.value = data;
  }
}

public Node merge(Node head1, Node head2){
  // 有链表为空，返回另一个链表
  if(head1 == null || head2 == null){
    retrun head1 == null ? head2 : head1;
  }
  
  Node head = head1.value < head2.value ? head1 : head2;
  // cur1是head1遍历的当前节点
  Node cur1 = head == head1 ? head1.next : head1;
  // cur2是head2遍历的当前节点
  Node cur2 = head == head1 ? head2 : head2.next;
  
  // 新节点往后移动的节点
  Node pre = head;
  
  // 两链表不为空时，才进行遍历
  while(cur1 != null && cur2 != null){
    // cur1的值比较小
    if(cur1.value <= cur2.value){
      pre.next = cur1;
      pre =cur1;
      cur1 = cur1.next;
    }
    // cur2的值比较小
    else{
      pre.next = cur2;
      pre = cur2;
      cur2 = cur2.next;
    }
  }
  // 剩下的直接连接到最后
  pre.next = cur1 == null ? cur2 : cur1;
  return head;
}
