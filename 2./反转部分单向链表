题目：
  给定一个单向链表的头节点head，以及两个整数from和to，在单向链表上把第from个节点到第to个节点这一部分进行反转。
    例如：
    1-->2-->3-->4-->5-->null，from=2，to=4
    调整结果为：1->4->3->2->5->null
    
    1->2->3->null from=1, to=3
    调整结果：3->2->1->null
    
要求：
  1. 如果链表长度为N，时间复杂度O(N)，额外空间复杂度O(1)
  2. 如果不满足 1<=from<=to<=N,则不用调整
  
思路：
  处理过程如下：
    1. 先判断是否满足1<=from<=to<=N,如果不满足，则直接返回原来的头节点
    2. 先找到第from-1个节点fPre和第to+1个节点tPos。
    3. 如果fPre为null，说明发转部分是包含头节点的，则返回新的头结点，也就是没反转之前反转部分的最后一个节点，也就是反转之后反转部分的第一个节点。
    如果fPre不为null，则返回旧的头结点
    
// code java
public Node reversePart(Node head, int from, int to){
  int len=0;
  Node tmp = head;
  Node fPre = null;
  Node tPos = null;
  
  while(tmp != null){
    //判断是否已经找到对应位置
    len++;
    // 找到指定首节点的前一个节点
    tPre = len==from-1 ? tmp : fPre;
    // 找到指定末节点的后一个节点
    tPos = len==to+1 ? tmp : fPos;
    tmp = tmp.next;
  }
  
  // 不满足1<=from<=to<=N下，直接返回头节点
  if(from > to || from < 1 || to > len){
    return head;
  }
  
  // 找到要开始反转的头结点，如果前一个节点为null，表示从head节点开始反转，否则是fPre的下一个节点开始
  tmp = fPre == null ? head : fPre.next;
  
  // 开始进行反转
  Node tmp2 = tmp.next;
  首节点的next指向末节点下一位
  tmp.next = tPos;
  Node next = null;
  while(tmp2 != tPos){
    next = tmp2.next;
    tmp2.next = tmp;
    tmp = tmp2;
    tmp2 = next;
  }
  
  // 如果fPre不为空，则返回的头结点依然是head，此时fPre的next节点需要指向反转后的节点
  if(fPre != null){
    fPre.next = node1;
    return head;
  }
  retrun tmp;
}
