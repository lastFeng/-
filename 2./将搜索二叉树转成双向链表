题目：
  对二叉树的节点来说，有本身的值域，有指向左孩子和右孩子的两个指针；
  对双向链表的节点来说，有本身的值域，有指向上一个节点和下一个节点的指针。
  在结构上，两种结构有相似性，现在有一颗搜索二叉树，请将其转换为一个有序的双向链表。
  
  public class Node{
    public int value;
    publie Node left;
    public Node right;
    
    public Node(int data){
      this.value = data;
    }
  }
  
  对每一个节点来说，原来的right指针等价于转换后的next指针，原来的left指针等价于转换后的last节点，最后返回转换后的双向链表头节点。
  
思路：
  方法一： 用队列等容器收集二叉树中序遍历结果的方法，时间复杂度O(N)，空间复杂度O(N)
    1. 生成一个队列，记为queue，按照二叉树中序遍历的顺序，将每个节点放入queue中。
    2. 从queue中依次弹出节点，并按照弹出的顺序重新连接所有的节点即可。
    
    public Node convert1(Node head){
      Queue<Node> queue = new LinkedList<>();
      
      // 将二叉树中序遍历结果按顺序放入queue
      inOrderToQueue(head, queue);
      
      if(queue.isEmpty()){
        return head;
      }
      
      // 头结点为队列第一个出来的节点
      head = queue.poll();
      Node pre = head;
      pre.left = null;
      pre.right = null;
      Node cur = null;
      // 从第二个节点开始
      while(!queue.isEmpty()){
        // 设置双向节点
        cur = queue.poll();
        pre.rigth = cur;
        cur.left = pre;
        pre = cur;
      }
      
      // 设置最后一个尾节点
      pre.right = null;
      return head;
    }
    
    public void inOrderToQueue(Node head, Queue<Node> queue){
      if(head == null){
        return;
      }
      
      inOrderToQueue(head.left, queue);
      queue.offer(head);
      inOrderToQueue(head.right, queue);
    }
    
  方法二：利用递归函数，除此之外不使用任何容器的方法。时间复杂度为O(N)，额外空间复杂度为O(1)。h为树的高度
    1. 实现递归函数process。process的功能是将一颗二叉树转换为一个结构有点特殊的有序双向链表。
    结构特殊是指这个双向链表尾节点的right指针指向该双向链表的头节点。函数process最终返回这个链表的尾节点。（如此可以快速找到双向链表的头尾两端）
    2. 通过process过程得到的双向链表是尾节点的right指针连向头结点的结构。所以最终需要将尾节点的right指针设置为null来让双向链表变成正常的样子。
    
    // code java
    public Node convert2(Node head){
      // 为空时
      if(head==null){
        return null;
      }
      
      // 返回转换成的双链表的尾节点
      Node last = process(head);
      
      // 将尾节点指向头结点的值赋值为空
      head = last.right;
      last.right = null;
      return head;
    }
    
    public Node process(Node head){
      if(head == null){
        return null;
      }
      
      // 根节点中左半边节点构建
      Node leftE = process(head.left);
      // 根节点中右半边节点构建
      Node rightE = process(head.rihgt);
      
      // 左边开始
      Node leftS = leftE != null ? leftE.right : null;
      // 右边开始
      Node rightS = rightE != null ? rightE.right : null;
      
      // 左右两边都有值
      if(leftE != null && rightE != null){
        leftE.right = head;
        head.left = leftE;
        head.right = rightS;
        rightE.right = leftS;
        return rightE;
      }
      // 左边不为空,head为尾节点
      else if(leftE != null){
        leftE.right = head;
        head.left = leftE;
        head.right = leftS;
        return head;
      }
      // 右边不为空，startE为尾节点
      else if(rightE != null){
        head.right = rightS;
        rightS.left = head;
        rightE.right = head;
        return rightE;
      }
      // 两边都为空，head为尾节点
      else{
        head.right = head;
        return head;
       }
    }
    
    
    
