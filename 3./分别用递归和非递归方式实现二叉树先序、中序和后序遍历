题目：
  用递归和非递归的方式，实现二叉树先序、中序和后序遍历。打印所有的节点
  
思路：
  递归实现遍历如下代码：
  
// code java

 public class Node{
  public int value;
  public Node left;
  public Node right;
  
  public Node(int data){
    this.value = data;
  }
 }
 
 // 先序遍历（根 左 右）
 public void preOrderPecur(Node head){
  if(head == null){
    return;
  }
  
  System.out.print(head.value + " ");
  preOrderRecur(head.left);
  preOrderRecur(head.right);
 }
 
 // 中序遍历 （左 根 右）
 public void inOrderRecur(Node head){
  if(head == null){
    return;
  }
  
  inOrderRecur(head.left);
  System.out.print(head.value+ " ");
  inOrderRecur(head.right);
 }
 
 // 后序遍历 （左 右 根）
 public void posOrderRecur(Node head){
  if(head == null){
    return;
  }
  posOrderRecur(head.left);
  posOrderRecur(head.right);
  System.out.print(head.value + " ");
 }
 
 
 // 非递归思路：
  用递归方法解决的问题都能用非递归的方法实现。这是因为递归方法无非是利用函数栈来保存信息，
  如果用自己申请的数据结构来代替函数栈，也可以实现相同的功能。
  
  先序遍历：
    1. 申请一个新的栈，记为stack。然后将头结点head压入栈中。
    2. 从stack中弹出栈顶节点，记为cur，然后打印cur节点的值，再将节点cur的右孩子（不为空的话）先压入栈stack中，最后将cur的左孩子（不为空）压入栈
    3. 不断重复2，直到stack为空，全部过程结束。
    
  // code java
  public void preOrderUnRecur(Node head){
    System.out.print("pre-order: ");
    
    if(head != null){
      Stack<Node> stack = new Stack<>();
      stack.push(head);
      
      while(!stack.isEmpty()){
        head = stack.pop();
        // 打印节点
        System.outprint(head.value + " ");
        // 先将右节点压入（不为空）
        if(head.right != null){
          stack.push(head.right);
        }
        // 左节点压入
        if(head.left != null){
          stack.push(head.left)
        }
      }
    }
    System.out.pirntln();
  }
  
  // 中序遍历
  1. 申请一个新的栈，stack。初始时，令变量cur=head。
  2. 先把cur节点压入栈中，对以cur节点为头的整棵子树来说，依次把左边界压入栈中
  3. 不断重复步骤2，直到发现cur为空，此时从stack中弹出一个节点，记为node。打印node值，并让cur=node.right，然后继续重复2
  4. 当stack为空且cur为空时，整个过程停止。
  
  // code java
  public void inOrderUnRecur(Node head){
    System.out.print("in-Order: ");
    
    if(head != null){
      Stack<Node> stack = new Stack<>();
      
      while(!stack.isEmpty() && head != null){
        if(head != null){
          stack.push(head);
          head = head.left;
        }
        else{
          head = stack.pop();
          System.out.print(head.value + " ");
          head = head.right;
        }
      }
    }
    
    System.out.println();
  }

  // 后序遍历
  方法一：
  1. 申请一个栈，记为s1，然后将头节点head压入s1中。
  2. 从s1中弹出节点记为cur，然后依次将cur的左孩子和右孩子压入s1中。
  3. 在整个过程中，每一个从s1中弹出的节点都放入s2中。
  4. 不断重复步骤2和步骤3，直到s1为空，过程停止。
  5 从s2中依次弹出节点并打印，打印顺序就是后序遍历的顺序。
  
  // code java
  public void posOrderUnRecur(Node head){
    System.out.print("post-order: ");
    
    if(head != null){
      Stack<Node> s1 = new Stack<>();
      Stack<Node> s2 = new Stack<>();
      
      s1.push(head);
      while(!s1.isEmpty()){
        head = s1.pop();
        s2.push(head);
        
        if(head.left != null){
          s1.push(head.left);
        }
        
        if(head.right != null){
          s1.push(head.right);
        }
      }
      
      while(!s2.isEmpty()){
        System.out.print(s2.pop() + " ");
      }
    }
    
    System.out.println();
  }
  
  方法二：
    1. 申请一个栈，stack，将头节点压入stack，同时设置两个变量h和c。在整个流程中，h代表最近一次弹出并打印的节点，c代表stack的栈顶节点。
    初始时h为头节点，c为null。
    2. 每次令c等于当前stack的栈顶节点，但是不从stack中弹出，此时分以下三种情况。
      1）如果c的左孩子不为null，并且h不等于c的左孩子，也不等于c的右孩子，则把c的左孩子压入stack中。
      2）如果条件1）不成立，并且c的右孩子不为null，h不等于c的右孩子，则把c的右孩子压入stack中。
      3）如果1）和2)都不成立，说明c的左孩子和右孩子都处理完毕，那么弹出c并打印，令h=c；
    3. 重复步骤2，直到stack为空。
    
    // code java
    public void posOrderUnRecur(Node head){
      System.out.print("pos-order: ");
      
      if(head != null){
        Stack<Node> stack = new Stack<>();
        
        stack.push(head);
        
        while(!stack.isEmpty()){
          c = stack.peek();
          if(c.left != null && head != c.left){
            stack.push(c.left);
          }
          else if(c.right != null && head != c.right){
            stack.push(c.right);
          }
          else{
            System.out.print(stack.pop().value + " ");
            head = c;
          }
        }
      }
      
      System.out.println();
    }
