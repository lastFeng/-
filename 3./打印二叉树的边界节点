题目：
  给定一棵二叉树的头节点head，按照如下两种标准分别实现二叉树边界节点的逆时针打印。
  
  标准一：
  1. 头节点为边界节点。
  2. 叶节点为边界节点。
  3. 如果节点在其所在的层中是最左或最右的，那么也是边界节点。
  
  标准二：
  1. 头节点为边界节点。
  2. 叶节点为边界节点。
  3. 树左边界延伸下去的路径为边界节点。
  4. 树右边界延伸下去的路径为边界节点。
  
要求：
  1. 如果节点数为N，两种标准实现的时间复杂度要求都为O(N),额外空间复杂度都为O(h),h为二叉树的高度。
  2. 两种标准都要求逆时针顺序且不重复打印所有的边界节点。
  
思路：
  标准一：
  1. 得到二叉树每一层上最左和最右的节点。
  2. 从上到下打印所有层中的最左节点。
  3. 先序遍历二叉树，打印那些不属于某一层最左或最右的节点，但同时又是叶节点的节点。
  4. 从下到上打印所有层中的最右节点，但节点不能既是最左节点，又是最右节点。
  
  public class Node{
    public int value;
    public Node left;
    public Node right;
    
    public Node(int data){
      this.value = data;
    }
  } 
  
  // code java
  public void printEdge1(Node head){
    if(head == null){
      return;
    }
    
    int height = getHeight(head, 0);
    Node [][] edgeMap = new Node[height][2];
    
    setEdgeMap(head, 0, edgeMap);
    
    // 打印左边界
    for(int i=0; i != edgeMap.length; i++){
      System.out.print(edgeMap[i][0].value + " ");
    }
    
    // 打印既不是左边界，也不是右边界的叶子节点。
    printLeafNotInMap(head, 0, edgeMap);
    
    // 打印右边界，但不是左边界的点
    for(int i=edgMap.length-1; i != -1; i--){
      if(edgeMap[i][0] != edgeMap[i][1]){
        System.out.print(edgeMap[i][1].value + " ");
      }
    }
    System.out.println();
  }
  
  public int getHeight(Node h, int i){
    if(h == null){
      return 1;
    }
    
    return Math.max(getHeight(h.left, i+1), getHeight(h.right, i+1));
  }
  
  
  public void setEdgeMap(Node h, int i, Node[][] edgeMap){
    if(h == null){
      return;
    }
    
    // 递归先设置最左边的边界，当递归到最右边时，应保持最左边界值不变
    edgeMap[i][0] = edgeMap[i][0] == null ? h : edgeMap[i][0];
    // 递归最右边界时，设置右节点的最右节点。
    edgeMap[i][1] = h;
    setEdgeMap(h.left, i+1, edgeMap);
    setEdgeMap(h.right, i+1, edgeMap);
  }
  
  public void printLeafNotInMap(Node h, int i, Node[][] m){
    if(h == null){
      return ;
    }
    
    if(h.left == null && h.right == null && h != m[i][0] && h != m[i][1]){
      System.out.print(h.value + " ");
    }
    printLeafNotInMap(h.left, i+1, m);
    printLeafNotInMap(h.right, i+1, m);
  }
  
  标准二：
  1. 从头节点开始往下寻找，只要找到第一个既是左孩子，又是右孩子的节点，记为h，则进入步骤2.
